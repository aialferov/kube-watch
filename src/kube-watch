#!/bin/bash

set -e

Usage=$(cat <<EOF
Usage: kube-watch object <Type> <[Namespace/]Name> [Options]
       kube-watch file <FileName> [Options]
       kube-watch version

Options:
    -a,--all-namespaces       Watch objects in all namespaces
    -l,--label=<Label>        Filter objects with label
    -j,--jsonpath=<JsonPath>  Path to the object field (default: {})
    -c,--channel=<Channel>    Channel (default: /var/run/kube-watch/channel)
    -h,--handler=<Handler>    Handler (default: /usr/share/kube-watch/handler)
EOF
)

function main {
    local Target="$1"
    local Channel="/var/run/kube-watch/channel"
    local Handler="/usr/share/kube-watch/handler"
    local Pids=()

    case "${Target}" in
        object)
            local Type="$2"
            local NamespacedName="$3"
            local Namespace="${3%%/*}"
            local Name="${3##*/}"
            local Label=""
            local JsonPath="{}"
            local AllNamespaces=false

            if [ -z "${Type}" ]; then show_usage; fi

            if [ "${Namespace}/${Name}" != "${NamespacedName}" ]; then
                Namespace=""
            fi

            shift 3
        ;;
        file)
            local FileName="$2"

            if [ -z "${FileName}" ]; then usage; fi

            shift 2
        ;;
        version) cat /kube-watch-version; return ;;
        *) show_usage ;;
    esac

    for Arg in "$@"; do
        case "${Arg}" in
            -a|--all-namespaces) AllNamespaces=true ;;
            -l=*|--label=*) Label="${Arg#*=}" ;;
            -j=*|--jsonpath=*) JsonPath="${Arg#*=}" ;;
            -c=*|--channel=*) Channel="${Arg#*=}" ;;
            -h=*|--handler=*) Handler="${Arg#*=}" ;;
            *) unknown_option "${Arg}" ;;
        esac
    done

    set_runtime_config handler "${Handler}"
    set_runtime_config channel "${Channel}"
    create_channel "${Channel}"

    watch_channel "${Channel}"
    Pids+=("$!")

    case "${Target}" in
        object) watch_object "${Type}" "${Namespace}" "${Name}" \
                             "${AllNamespaces}" "${Label}" "${JsonPath}" \
                             "${Channel}" ;;
        file) watch_file "${FileName}" "${Channel}" ;;
    esac
    Pids+=("$!")

    wait_watchers "${Pids[@]}"
}

function watch_object {
    local Type="$1"
    local Namespace="$2"
    local Name="$3"
    local AllNamespaces="$4"
    local Label="$5"
    local JsonPath="$6"
    local Channel="$7"

    local Command="kubectl get --watch ${Type}"

    [ -n "${Name}" ] && Command="${Command} ${Name}"
    [ -n "${Namespace}" ] && Command="${Command} --namespace ${Namespace}"
    [ -n "${Label}" ] && Command="${Command} --selector ${Label}"
    [ -n "${JsonPath}" ] && Command="${Command} --output jsonpath=${JsonPath}"

    "${AllNamespaces}" && Command="${Command} --all-namespaces"

    echo "Watching object with ${Command}..."

    (while :; do
        ${Command} | tee "${Channel}" > /dev/null
    done) &
}

function watch_file {
    local FileName="$1"
    local Channel="$2"

    echo "Watching file ${FileName}..."

    cat "${FileName}" >> "${Channel}"
    (while :; do
        inotifyd kube-watch-handle-file "${FileName}"
    done) &
}

function watch_channel {
    local Channel="$1"

    echo "Watching channel ${Channel}..."
    inotifyd kube-watch-handle-channel "${Channel}" &
}

function wait_watchers {
    local Pids=("$@")

    echo "Watchers will be terminated on main process SIGTERM or SIGINT."
    trap 'kill -TERM ${Pids[@]}' SIGTERM SIGINT

    echo "Waiting for watchers (pids: ${Pids[*]}) get terminated..."
    wait "${Pids[@]}"
}

function create_channel {
    local Channel="$1"

    echo "Creating channel ${Channel}..."
    if [ ! -e "${Channel}" ]; then
        mkdir -p "$(dirname "${Channel}")"
        touch "${Channel}"
    fi
}

function set_runtime_config {
    local Key="$1"
    local Value="$2"

    echo "Setting ${Key} ${Value}..."

    mkdir -p "$(runtime_config_dir)"
    echo "${Value}" > "$(runtime_config_dir)/${Key}"
}
function runtime_config_dir {
    echo "/var/run/kube-watch-config"
}

function show_usage {
    >&2 echo "${Usage}"
    exit 2
}
function unknown_option {
    local Option="$1"
    >&2 echo "Unknown option: ${Option%%=*}"
    exit 2
}

main "$@"
