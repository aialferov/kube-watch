#!/bin/bash

set -e

USAGE=$(cat <<EOF
Usage: kube-watch run <Type> <[Namespace/]Name> [Options]
       kube-watch version

Options:
    -j,--jsonpath=<Jsonpath>  Path to the object field (default: {})
    -h,--handler=<Handler>    Handler (default: /usr/share/kube-watch/handler)
EOF
)

function main {
    local ACTION="$1"
    case "${ACTION}" in
        run) shift; watch_run "$@" ;;
        version) cat /version ;;
        *) usage ;;
    esac
}

function watch_run {
    local TYPE="$1"
    local NAMESPACED_NAME="$2"
    local NAMESPACE="${2%%/*}"
    local NAME="${2##*/}"
    local JSONPATH="{}"
    local HANDLER="/usr/share/kube-watch/handler"
    local PIDS=()

    if [ -z "${TYPE}" ] || [ -z "${NAME}" ]; then usage; fi

    if [ "${NAMESPACE}/${NAME}" != "${NAMESPACED_NAME}" ]; then
        NAMESPACE="$(namespace)"
    fi

    shift 2
    for ARG in "$@"; do
        case "${ARG}" in
            -j|--jsonpath=*) JSONPATH="${ARG#*=}"; shift ;;
            -h|--handler=*) HANDLER="${ARG#*=}"; shift ;;
            *=*) >&2 echo "Unknown argument: ${ARG%=*}"; exit 2 ;;
            *) >&2 echo "Unknown argument: ${ARG}"; exit 2 ;;
        esac
    done

    ensure_handler "${HANDLER}"
    ensure_channel

    watch_object "${TYPE}" "${NAMESPACE}" "${NAME}" "${JSONPATH}"
    PIDS+=("$!")

    watch_channel
    PIDS+=("$!")

    wait_watchers "${PIDS[@]}"
}

function watch_object {
    local TYPE="$1"
    local NAMESPACE="$2"
    local NAME="$3"
    local JSONPATH="$4"

    echo "Watching object ${TYPE} ${NAMESPACE}/${NAME} ${JSONPATH}..."

    (while :; do
        kubectl get "${TYPE}" "${NAME}" \
                --watch \
                --namespace "${NAMESPACE}" \
                --output jsonpath="${JSONPATH}" |
            tee "$(channel)" > /dev/null
    done) &
}

function watch_channel {
    echo "Watching channel $(channel)..."
    inotifyd kube-watch-handle "$(channel)" &
}

function wait_watchers {
    local PIDS=("$@")


    echo "Watchers will be terminated on main process SIGTERM or SIGINT."
    trap 'kill -TERM ${PIDS[@]}' SIGTERM SIGINT

    echo "Waiting for watchers (pids: ${PIDS[*]}) get terminated..."
    wait "${PIDS[@]}"
}

function ensure_handler {
    local HANDLER="$1"

    echo "Ensuring handler file $(handler)..."
    if [ ! -e "$(handler)" ]; then
        mkdir -p "$(dirname "$(handler)")"
        echo "${HANDLER}" > "$(handler)"
    fi
}

function ensure_channel {
    echo "Ensuring channel file $(channel)..."

    if [ ! -e "$(channel)" ]; then
        mkdir -p "$(dirname "$(channel)")"
        touch "$(channel)"
    fi
}

function channel {
    echo "/var/run/kube-watch/channel"
}
function handler {
    echo "/var/run/kube-watch/handler"
}

function kubectl {
    local CACERT; CACERT="$(service_account)/ca.crt"
    local TOKEN; TOKEN="$(cat "$(service_account)/token")"

    /bin/kubectl --certificate-authority "${CACERT}" \
                 --token "${TOKEN}" \
                 "$@"
}

function service_account {
    echo "/var/run/secrets/kubernetes.io/serviceaccount"
}
function namespace {
    cat "$(service_account)/namespace"
}

function usage {
    >&2 echo "${USAGE}"
    exit 2
}

main "$@"
