#!/bin/bash

set -e

USAGE=$(cat <<EOF
Usage: kube-watch run <Type> <[Namespace/]Name> [Options]
       kube-watch version

Options:
    -j,--jsonpath=<Jsonpath>  Path to the object field (default: {})
    -c,--channel=<Channel>    Channel (default: /var/run/kube-watch/channel)
    -h,--handler=<Handler>    Handler (default: /usr/share/kube-watch/handler)
EOF
)

function main {
    local ACTION="$1"
    case "${ACTION}" in
        run) shift; watch_run "$@" ;;
        version) cat /version ;;
        *) usage ;;
    esac
}

function watch_run {
    local TYPE="$1"
    local NAMESPACED_NAME="$2"
    local NAMESPACE="${2%%/*}"
    local NAME="${2##*/}"
    local JSONPATH="{}"
    local CHANNEL="/var/run/kube-watch/channel"
    local HANDLER="/usr/share/kube-watch/handler"
    local PIDS=()

    if [ -z "${TYPE}" ] || [ -z "${NAME}" ]; then usage; fi

    if [ "${NAMESPACE}/${NAME}" != "${NAMESPACED_NAME}" ]; then
        NAMESPACE="$(namespace)"
    fi

    shift 2
    for ARG in "$@"; do
        case "${ARG}" in
            -j=|--jsonpath=*) JSONPATH="${ARG#*=}" ;;
            -c=|--channel=*) CHANNEL="${ARG#*=}" ;;
            -h=|--handler=*) HANDLER="${ARG#*=}" ;;
            *) unknown_option "${ARG}" ;;
        esac
    done

    create_channel "${CHANNEL}"
    set_handler "${HANDLER}"

    watch_object "${TYPE}" "${NAMESPACE}" "${NAME}" "${JSONPATH}" "${CHANNEL}"
    PIDS+=("$!")

    watch_channel "${CHANNEL}"
    PIDS+=("$!")

    wait_watchers "${PIDS[@]}"
}

function create_channel {
    local CHANNEL="$1"

    echo "Creating channel ${CHANNEL}..."
    if [ ! -e "${CHANNEL}" ]; then
        mkdir -p "$(dirname "${CHANNEL}")"
        touch "${CHANNEL}"
    fi
}

function set_handler {
    local HANDLER="$1"

    echo "Setting handler ${HANDLER}..."
    echo "${HANDLER}" > "$(runtime_config)"
}

function watch_object {
    local TYPE="$1"
    local NAMESPACE="$2"
    local NAME="$3"
    local JSONPATH="$4"
    local CHANNEL="$5"

    echo "Watching object ${TYPE} ${NAMESPACE}/${NAME} ${JSONPATH}..."

    (while :; do
        kubectl get "${TYPE}" "${NAME}" \
                --watch \
                --namespace "${NAMESPACE}" \
                --output jsonpath="${JSONPATH}" |
            tee "${CHANNEL}" > /dev/null
    done) &
}

function watch_channel {
    local CHANNEL="$1"

    echo "Watching channel ${CHANNEL}..."
    inotifyd kube-watch-handle "${CHANNEL}" &
}

function wait_watchers {
    local PIDS=("$@")

    echo "Watchers will be terminated on main process SIGTERM or SIGINT."
    trap 'kill -TERM ${PIDS[@]}' SIGTERM SIGINT

    echo "Waiting for watchers (pids: ${PIDS[*]}) get terminated..."
    wait "${PIDS[@]}"
}

function runtime_config {
    echo "/var/run/kube-watch-config"
}

function kubectl {
    local CACERT; CACERT="$(service_account)/ca.crt"
    local TOKEN; TOKEN="$(cat "$(service_account)/token")"

    /bin/kubectl --certificate-authority "${CACERT}" \
                 --token "${TOKEN}" \
                 "$@"
}

function service_account {
    echo "/var/run/secrets/kubernetes.io/serviceaccount"
}
function namespace {
    if [ -e "$(service_account)/namespace" ]; then
        cat "$(service_account)/namespace"
    else
        echo "default"
    fi
}

function usage {
    >&2 echo "${USAGE}"
    exit 2
}
function unknown_option {
    local OPTION="$1"
    >&2 echo "Unknown option: ${OPTION%%=*}"
    exit 2
}

main "$@"
